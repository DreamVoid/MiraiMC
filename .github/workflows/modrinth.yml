name: Modrinth Publish

on:
  release:
    types: [published]

jobs:
  upload-mirai-to-modrinth:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (for gh cli context)
        uses: actions/checkout@v4

      - name: Download release assets (using gh cli)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p release-assets
          # 确保 TAG 变量存在
          TAG="${GITHUB_REF_NAME}"
          # 强制指定仓库，避免 .git 缺失问题
          gh release view "$TAG" --repo "$GITHUB_REPOSITORY" --json assets -q '.assets[].name' | grep -E 'MiraiMC-(Bukkit|Bungee|Sponge|Velocity)\.jar' | while read filename; do
            echo "Downloading $filename"
            # 同样强制指定仓库，否则 gh 会找不到
            gh release download "$TAG" --repo "$GITHUB_REPOSITORY" -p "$filename" -D release-assets
          done
          echo "Downloaded files:"
          ls -lh release-assets/

      - name: Get current version info and calculate next version
        id: version
        run: |
          curl -s https://api.miraimc.dreamvoid.me/version.json > version.json
          LATEST_UNSTABLE=$(jq -r '.["latest-unstable"]' version.json)
          VERSION_NUM=$(jq --arg v "$LATEST_UNSTABLE" -r '.versions[$v]' version.json)
          NEXT_VERSION_NUM=$((VERSION_NUM + 1))
          echo "next_version_num=$NEXT_VERSION_NUM" >> $GITHUB_OUTPUT

      - name: Get all Minecraft versions from Modrinth
        id: mc_versions
        run: |
          curl -s 'https://api.modrinth.com/v2/tag/game_version' > mc_versions.json
          jq -r '[.[] | select(.version | test("^[1-9][0-9]*\\.[0-9]+")) | .version] | map(select(. >= "1.0"))' mc_versions.json | jq -c . > filtered_mc_versions.json
          echo "Filtered game versions:"
          cat filtered_mc_versions.json
          echo "game_versions=$(cat filtered_mc_versions.json)" >> $GITHUB_OUTPUT

      - name: Set up Java (for upload tool if needed)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Modrinth Publish - Bukkit
        uses: cloudnode-pro/modrinth-publish@v2.1.3
        with:
          # Modrinth API domain.
          api-domain: https://staging-api.modrinth.com/v2/version # optional, default is api.modrinth.com
          # Modrinth API token.
          token: ${{ secrets.MODRINTH_TOKEN }}
          # The ID of the project this version is for.
          project: ${{ secrets.MODRINTH_PROJECT_ID }}
          # The name of this version.
          name: ${{ github.event.release.name }} # optional
          # The version number. Ideally will follow semantic versioning.
          version: ${{ steps.version.outputs.next_version_num }}-Bukkit
          # The changelog for this version.
          changelog: ${{ github.event.release.body }}
          # The mod loaders that this version supports, separated by new line, or as JSON string array. In case of resource packs, use `minecraft`.
          loaders: '["Bukkit","Folia","Paper","Purpur","Spigot"]'
          # A list of versions of Minecraft that this version supports, separated by new line, or as JSON string array. You can also use e.g. `1.20.x`, `1.21.x`, ….
          game-versions: [] # optional, default is []
          # A list of file paths to upload, separated by new line, or as JSON string array. There must be at least one file, unless the new version’s status is `draft`. The allowed file extensions are `.mrpack`, `.jar`, `.zip`, and `.litemod`.
          files: |
              release-assets/MiraiMC-Bukkit.jar
          # The name (not path) from `files` to be set as the primary file.
          primary-file: MiraiMC-Bukkit.jar # optional
          # A list of specific versions of projects that this version depends on, formatted as JSON array. See [Create Version - Modrinth API docs](https://docs.modrinth.com/api/operations/createversion/#request-body).
          dependencies: # optional, default is []
          
#      - name: Upload each asset to Modrinth
#        env:
#          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
#          MODRINTH_PROJECT_ID: ${{ secrets.MODRINTH_PROJECT_ID }}
#          CHANGELOG: ${{ github.event.release.body }}
#        run: |
#          set -e
#          shopt -s nullglob
#
#          changelog="$CHANGELOG"
#          next_version_num="${{ steps.version.outputs.next_version_num }}"
#          gh_title="${{ github.event.release.name }}"
#          lower_title="$(echo "$gh_title" | tr '[:upper:]' '[:lower:]')"
#          if echo "$lower_title" | grep -q "pre"; then
#            release_type="alpha"
#          elif echo "$lower_title" | grep -q "rc"; then
#            release_type="beta"
#          else
#            release_type="release"
#          fi
#
#          game_versions="$(cat filtered_mc_versions.json)"
#
#          for file in release-assets/*; do
#            filename=$(basename "$file")
#            case "$filename" in
#              MiraiMC-Bukkit.jar)
#                variant="Bukkit"
#                loaders='["Bukkit","Folia","Paper","Purpur","Spigot"]'
#                ;;
#              MiraiMC-Bungee.jar)
#                variant="Bungee"
#                loaders='["BungeeCord","Waterfall"]'
#                ;;
#              MiraiMC-Sponge.jar)
#                variant="Sponge"
#                loaders='["Sponge"]'
#                ;;
#              MiraiMC-Velocity.jar)
#                variant="Velocity"
#                loaders='["Velocity"]'
#                ;;
#              *)
#                echo "Skip $filename"
#                continue
#                ;;
#            esac
#
#            version_number="${next_version_num}-${variant}"
#
#            echo "Uploading $filename as $version_number to Modrinth, channel: $release_type ..."
#
#            curl -v -X POST "https://api.modrinth.com/v2/version" \
#              -H "Authorization: $MODRINTH_TOKEN" \
#              -F "project_id=$MODRINTH_PROJECT_ID" \
#              -F "version_number=$version_number" \
#              -F "name=$version_number" \
#              -F "version_type=$release_type" \
#              -F "changelog=$changelog" \
#              -F "file_parts=@$file" \
#              -F "primary_file=MiraiMC-${variant}.jar" \
#              -F "game_versions=$game_versions" \
#              -F "loaders=$loaders" \
#              --fail-with-body
#
#            if [ $? -ne 0 ]; then
#              echo "Failed to upload $filename to Modrinth"
#              exit 1
#            fi
#          done

      - name: Clean up assets
        run: rm -rf release-assets version.json mc_versions.json filtered_mc_versions.json
